exports[`LoadingIndicator [common] example testing should match snapshot for 1.interactive 1`] = `
<LoadingIndicator
  hasOverlay={true}
  isLoading={true}
  overlayKind="dark">
  <Button
    hasOnlyIcon={false}
    isActive={false}
    isDisabled={false}
    onClick={[Function]}
    style={
      Object {
        "margin": 10,
      }
    }
    type="button">
    Get more data
  </Button>
  <Button
    hasOnlyIcon={false}
    isActive={false}
    isDisabled={false}
    onClick={[Function]}
    type="button">
    Switch overlay color
  </Button>
  <BarChart
    data={
      Array [
        Object {
          "x": "2015-01-01",
          "y": 0,
        },
        Object {
          "x": "2015-01-02",
          "y": 0,
        },
        Object {
          "x": "2015-01-03",
          "y": 0,
        },
        Object {
          "x": "2015-01-04",
          "y": 0,
        },
      ]
    }
    hasLegend={false}
    hasToolTips={true}
    height={400}
    margin={
      Object {
        "bottom": 50,
        "left": 80,
        "right": 20,
        "top": 10,
      }
    }
    palette={
      Array [
        "color-chart-0",
        "color-chart-1",
        "color-chart-2",
        "color-chart-3",
        "color-chart-4",
        "color-chart-5",
      ]
    }
    width={1000}
    xAxisField="x"
    xAxisFormatter={[Function]}
    xAxisTickCount={null}
    xAxisTitle={null}
    xAxisTitleColor="#000"
    yAxisFields={
      Array [
        "y",
      ]
    }
    yAxisIsStacked={false}
    yAxisMin={0}
    yAxisTickCount={null}
    yAxisTitle="Revenue"
    yAxisTitleColor="#000"
    yAxisTooltipFormatter={[Function]} />
</LoadingIndicator>
`;

exports[`LoadingIndicator [common] example testing should match snapshot for 2.default 1`] = `
<LoadingIndicator
  hasOverlay={true}
  isLoading={true}
  overlayKind="light">
  <BarChart
    data={
      Array [
        Object {
          "x": "2015-01-01",
          "y": 1,
        },
        Object {
          "x": "2015-01-02",
          "y": 2,
        },
        Object {
          "x": "2015-01-03",
          "y": 3,
        },
        Object {
          "x": "2015-01-04",
          "y": 5,
        },
      ]
    }
    hasLegend={false}
    hasToolTips={true}
    height={400}
    margin={
      Object {
        "bottom": 50,
        "left": 80,
        "right": 20,
        "top": 10,
      }
    }
    palette={
      Array [
        "color-chart-0",
        "color-chart-1",
        "color-chart-2",
        "color-chart-3",
        "color-chart-4",
        "color-chart-5",
      ]
    }
    width={1000}
    xAxisField="x"
    xAxisFormatter={[Function]}
    xAxisTickCount={null}
    xAxisTitle={null}
    xAxisTitleColor="#000"
    yAxisFields={
      Array [
        "y",
      ]
    }
    yAxisIsStacked={false}
    yAxisMin={0}
    yAxisTickCount={null}
    yAxisTitle={null}
    yAxisTitleColor="#000"
    yAxisTooltipFormatter={[Function]} />
</LoadingIndicator>
`;

exports[`LoadingIndicator [common] example testing should match snapshot for 3.custom-message 1`] = `
<div>
  <LoadingIndicator
    hasOverlay={true}
    isLoading={true}
    overlayKind="light">
    <BarChart
      data={
        Array [
          Object {
            "x": "2015-01-01",
            "y": 1,
          },
          Object {
            "x": "2015-01-02",
            "y": 2,
          },
          Object {
            "x": "2015-01-03",
            "y": 3,
          },
          Object {
            "x": "2015-01-04",
            "y": 5,
          },
        ]
      }
      hasLegend={false}
      hasToolTips={true}
      height={400}
      margin={
        Object {
          "bottom": 50,
          "left": 80,
          "right": 20,
          "top": 10,
        }
      }
      palette={
        Array [
          "color-chart-0",
          "color-chart-1",
          "color-chart-2",
          "color-chart-3",
          "color-chart-4",
          "color-chart-5",
        ]
      }
      width={1000}
      xAxisField="x"
      xAxisFormatter={[Function]}
      xAxisTickCount={null}
      xAxisTitle={null}
      xAxisTitleColor="#000"
      yAxisFields={
        Array [
          "y",
        ]
      }
      yAxisIsStacked={false}
      yAxisMin={0}
      yAxisTickCount={null}
      yAxisTitle={null}
      yAxisTitleColor="#000"
      yAxisTooltipFormatter={[Function]} />
    <LoadingMessage>
      <LoadingMessage.Icon>
        <LoadingIcon
          aspectRatio="xMidYMid meet"
          isBadge={false}
          size={16}
          speed="slow"
          viewBox="0 0 16 16" />
      </LoadingMessage.Icon>
      <LoadingMessage.Title>
        Custom Title
      </LoadingMessage.Title>
      <LoadingMessage.Body>
        Custom Body
      </LoadingMessage.Body>
    </LoadingMessage>
  </LoadingIndicator>
  <LoadingIndicator
    hasOverlay={true}
    isLoading={true}
    overlayKind="light">
    <BarChart
      data={
        Array [
          Object {
            "x": "2015-01-01",
            "y": 1,
          },
          Object {
            "x": "2015-01-02",
            "y": 2,
          },
          Object {
            "x": "2015-01-03",
            "y": 3,
          },
          Object {
            "x": "2015-01-04",
            "y": 5,
          },
        ]
      }
      hasLegend={false}
      hasToolTips={true}
      height={400}
      margin={
        Object {
          "bottom": 50,
          "left": 80,
          "right": 20,
          "top": 10,
        }
      }
      palette={
        Array [
          "color-chart-0",
          "color-chart-1",
          "color-chart-2",
          "color-chart-3",
          "color-chart-4",
          "color-chart-5",
        ]
      }
      width={1000}
      xAxisField="x"
      xAxisFormatter={[Function]}
      xAxisTickCount={null}
      xAxisTitle={null}
      xAxisTitleColor="#000"
      yAxisFields={
        Array [
          "y",
        ]
      }
      yAxisIsStacked={false}
      yAxisMin={0}
      yAxisTickCount={null}
      yAxisTitle={null}
      yAxisTitleColor="#000"
      yAxisTooltipFormatter={[Function]} />
    <LoadingMessage
      Body="Please wait"
      Icon={
        <LoadingIcon
          aspectRatio="xMidYMid meet"
          isBadge={false}
          size={16}
          speed="fast"
          viewBox="0 0 16 16" />
      }
      Title="Enhancing..." />
  </LoadingIndicator>
</div>
`;

exports[`LoadingIndicator [common] example testing should match snapshot for 4.no-title 1`] = `
<LoadingIndicator
  hasOverlay={true}
  isLoading={true}
  overlayKind="light">
  <BarChart
    data={
      Array [
        Object {
          "x": "2015-01-01",
          "y": 1,
        },
        Object {
          "x": "2015-01-02",
          "y": 2,
        },
        Object {
          "x": "2015-01-03",
          "y": 3,
        },
        Object {
          "x": "2015-01-04",
          "y": 5,
        },
      ]
    }
    hasLegend={false}
    hasToolTips={true}
    height={400}
    margin={
      Object {
        "bottom": 50,
        "left": 80,
        "right": 20,
        "top": 10,
      }
    }
    palette={
      Array [
        "color-chart-0",
        "color-chart-1",
        "color-chart-2",
        "color-chart-3",
        "color-chart-4",
        "color-chart-5",
      ]
    }
    width={1000}
    xAxisField="x"
    xAxisFormatter={[Function]}
    xAxisTickCount={null}
    xAxisTitle={null}
    xAxisTitleColor="#000"
    yAxisFields={
      Array [
        "y",
      ]
    }
    yAxisIsStacked={false}
    yAxisMin={0}
    yAxisTickCount={null}
    yAxisTitle={null}
    yAxisTitleColor="#000"
    yAxisTooltipFormatter={[Function]} />
  <LoadingMessage
    Title={null} />
</LoadingIndicator>
`;

exports[`LoadingIndicator [common] example testing should match snapshot for 5.no-overlay 1`] = `
<LoadingIndicator
  hasOverlay={false}
  isLoading={true}
  overlayKind="light">
  <BarChart
    data={
      Array [
        Object {
          "x": "2015-01-01",
          "y": 1,
        },
        Object {
          "x": "2015-01-02",
          "y": 2,
        },
        Object {
          "x": "2015-01-03",
          "y": 3,
        },
        Object {
          "x": "2015-01-04",
          "y": 5,
        },
      ]
    }
    hasLegend={false}
    hasToolTips={true}
    height={400}
    margin={
      Object {
        "bottom": 50,
        "left": 80,
        "right": 20,
        "top": 10,
      }
    }
    palette={
      Array [
        "color-chart-0",
        "color-chart-1",
        "color-chart-2",
        "color-chart-3",
        "color-chart-4",
        "color-chart-5",
      ]
    }
    width={1000}
    xAxisField="x"
    xAxisFormatter={[Function]}
    xAxisTickCount={null}
    xAxisTitle={null}
    xAxisTitleColor="#000"
    yAxisFields={
      Array [
        "y",
      ]
    }
    yAxisIsStacked={false}
    yAxisMin={0}
    yAxisTickCount={null}
    yAxisTitle={null}
    yAxisTitleColor="#000"
    yAxisTooltipFormatter={[Function]} />
</LoadingIndicator>
`;

exports[`LoadingIndicator [common] example testing should match snapshot for 6.light-overlay 1`] = `
<LoadingIndicator
  hasOverlay={true}
  isLoading={true}
  overlayKind="light">
  <BarChart
    data={
      Array [
        Object {
          "x": "2015-01-01",
          "y": 1,
        },
        Object {
          "x": "2015-01-02",
          "y": 2,
        },
        Object {
          "x": "2015-01-03",
          "y": 3,
        },
        Object {
          "x": "2015-01-04",
          "y": 5,
        },
      ]
    }
    hasLegend={false}
    hasToolTips={true}
    height={400}
    margin={
      Object {
        "bottom": 50,
        "left": 80,
        "right": 20,
        "top": 10,
      }
    }
    palette={
      Array [
        "color-chart-0",
        "color-chart-1",
        "color-chart-2",
        "color-chart-3",
        "color-chart-4",
        "color-chart-5",
      ]
    }
    width={1000}
    xAxisField="x"
    xAxisFormatter={[Function]}
    xAxisTickCount={null}
    xAxisTitle={null}
    xAxisTitleColor="#000"
    yAxisFields={
      Array [
        "y",
      ]
    }
    yAxisIsStacked={false}
    yAxisMin={0}
    yAxisTickCount={null}
    yAxisTitle={null}
    yAxisTitleColor="#000"
    yAxisTooltipFormatter={[Function]} />
</LoadingIndicator>
`;
