@import '../../styles/mixins';
@import '../../styles/variables';

@List: lucid-List;
@ListLevels: 3;

@List-size-border: 4px;
@List-size-iconButton: 20px;
@List-size-icon: 12px;

@ListChild-size-spacer: 6px;
@ListChild-size-padding: 15px;



// Resets
ul.lucid-List { list-style: none; }

/*
	Primary Component - List
  Should create a default flexible list capable of
  containing an infinate number of nested items.
*/
.lucid-List {
	display: flex;
	flex-direction: column;
	justify-content: flex-start;
	align-items: stretch;
	width: 100%;
	padding: 0;

	// ToDo: style version with a the x-axis set as primary
	&-is-horizontal { flex-direction: row; }
}

/*
 * Child Component - ListItem
*/
.lucid-List-ListItem {
	display: flex;
	flex-direction: column;
	align-items: stretch;

	>a {
		.selectable();
		display: flex;
		font-size: 12px;
		justify-content: flex-start;
		align-items: center;
		font-weight: bold;
		border-width: 1px 0 0 0;
		border-color: @color-gray;
		border-style: solid;
		color: @color-primary;
		padding: 10px 0 8px @ListChild-size-padding;
		line-height: 1em;
    height: 30px;

		&:hover {
			.hardstop-gradient(to right, @featured-color-primary, @featured-color-default-gradientEndColor, @List-size-border);
			color: @color-darkGray;
		}

		&:focus,
		&:active {
			.hardstop-gradient(to right, @featured-color-primary, @featured-color-primary-gradientStartColor, @List-size-border);
			color: @color-darkGray;
		}

		>span{ flex: 1; }
	}

	// All List Items who have nested Lists
	&-is-parent {
		> a {border-bottom-color: transparent;}

		.lucid-List .lucid-List-ListItem{
			>a {
				font-weight: normal;
				border-color: transparent;

				&:before {
					content: '-';
					display: inline-block;
					width: @ListChild-size-spacer;
					color: @color-gray;
					margin: 0 @ListChild-size-spacer 0 0;
				}

				&:hover {
					&:before {
						color: @color-darkGray;
					}
				}
			}

			// ToDo make this a looping mixin, to handle as many layers deep as we need to go
			//  Calc @ListChild-size-padding + (12 * nestingListDepth) (in this case nestingListDepth = 1)
			>ul {
				li a{
					padding: 10px 0 8px @ListChild-size-padding + 12;
				}
			}

		}
	}
	&:first-of-type {
		>a {
			border-top-color: transparent;
		}
	}
}

/* Expander Button - Added to the DOM with React when hasExpander = true */
.lucid-List-ListItem {
	>a {
		.lucid-List-expander{
			display: flex;
			justify-content: center;
			align-items: center;
			width: @List-size-iconButton;
			height: @List-size-iconButton;
			font-size: @List-size-icon;
			background: transparent;
			border-color: transparent;
			margin-right: 5px;
			padding: 0;
			line-height: 1em;

			// Remove the unnecessary animated background button gradient from the DOM
			&:active, &:focus {
				&:before{display: none;}
			}

			.lucid-CaretIcon {
				width: @List-size-icon;
				height: @List-size-icon;
				color: @color-gray;
			}
		}

		&:hover {
			.lucid-List-expander {
				border: 1px solid @featured-color-default-borderColor;
			}
		}
		&:focus,
		&:active {
			.lucid-List-expander {
				background: transparent;
				border: 1px solid transparent;

				.lucid-CaretIcon {
					color: @color-primary;
				}
			}
		}
	}
}
