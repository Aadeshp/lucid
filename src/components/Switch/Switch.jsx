import _ from 'lodash';
import classNames from 'classnames';
import React from 'react';

import { bindClassNames } from '../../util/style-helpers';

const generateBoundClassNames = bindClassNames('Switch');
const {
	bool,
	func,
	object,
	string
} = React.PropTypes;

/**
 * {"categories": ["controls", "toggles"]}
 *
 * This is a toggle -- a component that is in one of two particular states at
 * any given moment in time -- that uses a visualization of a physical on/off
 * switch made popular by smartphone OSes to reflect its current state.
 *
 * It uses a hidden native check box control under the hood but leverages other
 * HTML elements to visualize its state.
 */
const Switch = React.createClass({
	propTypes: {
		/**
		 * Appended to the component-specific class names set on the root
		 * element.
		 */
		className: string,

		/**
		 * Indicates whether the component should appear and act disabled by
		 * having a "greyed out" palette and ignoring user interactions.
		 */
		isDisabled: bool,

		/**
		 * Indicates that the component is in the "selected" state when true
		 * and in the "unselected" state when false.
		 */
		isSelected: bool,

		/**
		 * Called when the user clicks on the component or when they press the
		 * space key while the component is in focus: the first parameter is a
		 * boolean value set to the opposite of the isSelected prop's value
		 * and the second parameter is the synthetic event object generated by
		 * React.
		 */
		onSelect: func,

		/**
		 * Passed through to the root element.
		 */
		style: object
	},

	getDefaultProps() {
		return {
			isDisabled: false,
			isSelected: false,
			onSelect: _.noop
		};
	},

	componentDidMount() {
		this.nativeElement = this.refs.nativeElement;
	},

	render() {
		const {
			className,
			isDisabled,
			isSelected,
			style,
			...passThroughs
		} = this.props;

		return (
			<div
					className={classNames(generateBoundClassNames('~', {
						'is-disabled': isDisabled,
						'is-selected': isSelected
					}), className)}
					onClick={this.handleClicked}
					onTouchEnd={this.handleClicked}
					style={style}
			>
				<input
						checked={isSelected}
						className={generateBoundClassNames('native')}
						disabled={isDisabled}
						defaultChecked={isSelected}
						ref='nativeElement'
						type='checkbox'
						{...passThroughs}
				/>
				<span className={generateBoundClassNames('visualization-container')} />
				<span className={generateBoundClassNames('visualization-glow')} />
				<span className={generateBoundClassNames('visualization-handle')} />
			</div>
		);
	},

	handleClicked(event) {
		const {
			isDisabled,
			isSelected,
			onSelect
		} = this.props;

		if (!isDisabled) {
			onSelect(!isSelected, event);
			this.nativeElement.focus();
		}
	}
});

export default Switch;
