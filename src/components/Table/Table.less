@Table-row-height: 26px;
@Table-row-heightLarge: 36px;
@Table-cell-padding: 9px;
@Table-cell-border: 1px solid @color-gray;
@Table-header-backgroundColor: #767b7f;
@Table-header-colorLight: #525659;
@Table-header-colorDark: #393d40;
@Table-header-border: 1px solid @Table-header-colorDark;
@Table-header-cell-border: 1px solid fade(white, 30%);
@Table-hover-borderWidth: 4px;
@Table-hasCheckbox-width: 41px;

.lucid-Table {
	.no-safari-flicker();
	#normalize.lucid-table();
	border: 1px solid @color-borderColor;
	font: 500 @font;
	color: @color-textColor;
	background-color: @color-white;

	a {
		color: @color-linkColor;
	}

	// **
	// * `&-thead` is used to limit some styles to be only applyed to the
	// * `<thead>`.  The `&-head` defines the header or the `.lucid-Table`
	&-thead {
		user-select: none;

		// **
		// * a "row" within the "thead"
		// *
		.lucid-Table-thead-row {
			background-color: @Table-header-backgroundColor;
		}
		// **
		// * a "cell" within the "thead"
		// *
		.lucid-Table-cell {

			border-top: @Table-header-border;
			border-bottom: @Table-header-border;
			border-right: @Table-header-cell-border;
			color: @color-white;

			// **
			// * if a cell in the `&-thead` has a `colspan` can the border bottom
			// * color to match the vertical styling.
			// *
			&[colspan] {
				border-bottom: @Table-header-cell-border;
			}

			&.lucid-Table-isSortable {
				&:hover {
					background-color: @Table-header-colorDark;
					cursor: pointer;
				}
			}

			// *
			// * is applied when a column has been sorted.
			// *
			&.lucid-Table-isSorted {
				background-color: @Table-header-colorLight;
				line-height: inherit;
			}

			// **
			// * set the border of the first "th" to match the border of the header
			// *
			&:first-of-type {
				border-left: @Table-header-border;
			}
			// **
			// * set the border of the last "th" to match the border of the header
			// *
			&:last-of-type {
				border-right: @Table-header-border;
			}
		}
	}
	&-tbody {
		// **
		// * set the border of all "td" within a '&-tbody'
		// *
		.lucid-Table-cell {
			border-bottom: @Table-cell-border;
		}
	}

	// **
	// *A standard `<tr>` tag
	// *
	&-row {
		.rowHover(@color-lightGray);
	}

	// **
	// * TEMP to show always on hover state
	// *
	&-isHover {
		background-color: @color-lightGray;
		td{
			&:first-of-type {
				.hardstop-gradient(to right, @color-primary, @color-lightGray, @Table-hover-borderWidth);
			}
		}
		.rowHover(@color-lightGray);
	}

	&-isSorted-container {
		display: flex;
		margin: 0;
		padding: 0;
		list-style: none;
		justify-content: space-between;
		align-items: center;
	}

	&-isSorted-title {
		flex: 1;
	}

	&-isSorted-caret {
		display: flex;
		margin-left: @Table-cell-padding;
	}

	// **
	// * sort icon is used within a TH to indicate that a column can be sorted.
	// *
	&-sort-icon {
		fill: @color-white;
		width: 8px;
		height: 8px;
	}

	// **
	// * When `&-isDisabled` is applied to a row the row will appear disabled
	// *
	&-isDisabled {
		color: @color-disabledText;
		font-style: italic;
		a {
			color: fade(multiply(@color-disabledText, @color-primary), 50%);
		}
	}

	// **
	// * A row is `&-isSelected` when a `<Checkbox>` within that row is active
	// *
	&-isSelected {
		background-color: @color-primaryLight;
		.rowHover(multiply(@color-primaryLight, @color-lightGray));
	}

	// **
	// * A row is `&-isActive` when that row is active and a lower third panel
	// * is displayed.
	// *
	&-isActive {
		background-color: @color-primaryMedium;
		td{
			&:first-of-type {
				.hardstop-gradient(to right, @color-primary, @color-primaryMedium, @Table-hover-borderWidth);
			}
		}
		.rowHover(multiply(@color-primaryMedium, @color-lightGray));
	}

	// **
	// * A standard `<td>` or `<th>` tag.
	// *
	&-cell {
		padding: 0 @Table-cell-padding;
		line-height: @Table-row-height;
		box-sizing: border-box;

		&[rowspan] {
			line-height: inherit;
		}
	}

	// **
	// * Apply to align the text to the left.
	// *
	&-align-left {
		text-align: left;
	}

	// **
	// * Apply to align the text to the right.
	// *
	&-align-right {
		text-align: right;
	}

	// **
	// * Apply to align the text in the center of a `&-cell`.
	// *
	&-align-center {
		text-align: center;
	}

	// **
	// * Add `&-hasCheckbox` if the `&-cell` has a `<Checkbox>` as a child.  This
	// * will change the width to fit only the `<Checkbox`> and change the
	// * line-height to inherit to allow the `<Checkbox>` to be centered within
	// * the cell.
	// *
	&-hasCheckbox {
		width: @Table-hasCheckbox-width;
		padding: 0 @Table-cell-padding;
		line-height: inherit;
	}
	// **
	// * Add `&-hasIcon` if the `&-cell` has a `<Icon>` as a child.  This will
	// * change the width to fit only the `<Icon`> and change the line-height to
	// * inherit to allow the `<Icon>` to be centered within the cell.
	// *
	&-hasIcon {
		line-height: inherit;
		width: 37px;
	}

	// **
	// * Add `&-hasButton` if the `&-cell` has a `<Button>` as a child. This class
	// * will center the `<Button>` within the cell.
	// *
	&-hasButton {
		text-align: center;
	}

	// **
	// * Add `&-hasBorderLeft` if the `&-cell` needs to have a vertical border
	// * line on the left.
	// *
	&-hasBorderLeft {
		border-left: @Table-cell-border;
	}

	// **
	// * Add `&-hasBorderRight` if the `&-cell` needs to have a vertical border
	// * line on the right.
	// *
	&-hasBorderRight {
		border-right: @Table-cell-border;
	}

	&-hasRowSpan {
		background: @color-white !important;
	}

	// **
	// * Add `&-hasExtraWhitespace` increased the padding/line-height of the cells of
	// * the the table by 50%. The increased line-heightis applyed only the
	// * `&-tbody` cells.
	// *
	&-hasExtraWhitespace {
		th.lucid-Table-cell {
			&.lucid-Table-hasCheckbox {
				width: @Table-hasCheckbox-width;
				line-height: inherit;
			}
		}
		td.lucid-Table-cell {
			line-height: @Table-row-heightLarge;
			&.lucid-Table-hasCheckbox {
				line-height: inherit;
			}
			&.lucid-Table-hasIcon {
				line-height: inherit;
			}
		}

	}
}

// ** MIXIN
// * This mixin is used to help with the hover state.  The designs call for a
// * 4px line on the left of the "row".  To do this we use our `.hardstop-gradient`
// * which is appied to the first `.lucid-Table-cell` as a background gradient.
// * The mixin takes a single background color that is used to fill the "row"
// *
.rowHover(@bgcolor) {
	&:hover {
		background-color: @bgcolor;
		.lucid-Table-cell {
			&:first-of-type, &.lucid-Table-isAfterRowSpan {
				.hardstop-gradient(to right, @color-primary, @bgcolor, @Table-hover-borderWidth);
			}
		}
	}
}
